rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isUser(uid) {
      return request.auth != null && request.auth.uid == uid;
    }
    
    function userOwnsACommunity() {
      // Correct way to query within rules. Checks if a community doc exists for the user.
      return get(/databases/$(database)/documents/communities?where("ownerUid", "==", request.auth.uid)).size() > 0;
    }
    
    function isCommunityOwner(communityId) {
      return get(/databases/$(database)/documents/communities/$(communityId)).data.ownerUid == request.auth.uid;
    }
    
    function isCommunityMember(communityId) {
      return exists(/databases/$(database)/documents/communities/$(communityId)/members/$(request.auth.uid));
    }
    
    function communityData() {
      return request.resource != null && request.resource.data != null ? request.resource.data : {};
    }
    
    function getInvite(inviteId) {
        return get(/databases/$(database)/documents/invitations/$(inviteId));
    }

    function isPendingInvite(inviteId) {
        return getInvite(inviteId).data.status == 'pending';
    }

    function inviteMatchesMemberUpdate(memberData) {
        let invite = getInvite(memberData.inviteId);
        return invite.data.code == memberData.inviteCode &&
               invite.data.email == request.auth.token.email;
    }

    // Rules for collections
    match /communities/{communityId} {
      allow read: if isCommunityMember(communityId);
      allow create: if isUser(communityData().ownerUid) && !userOwnsACommunity();
      allow update: if isCommunityOwner(communityId);
      
      match /members/{memberId} {
        allow read: if isCommunityMember(communityId);
        allow create: if isCommunityOwner(communityId);
        // Allow member update if:
        // 1. User is the community owner
        // 2. User is updating their own member document
        // 3. A new user is accepting a pending invitation
        allow update: if isCommunityOwner(communityId) || 
                         (isUser(memberId) && isCommunityMember(communityId)) || 
                         (isPendingInvite(request.resource.data.inviteId) && inviteMatchesMemberUpdate(request.resource.data));
        allow delete: if isCommunityOwner(communityId);
      }
      
      match /families/{familyId} {
        allow read, create, update, delete: if isCommunityOwner(communityId);
      }
      
      match /contributions/{contributionId} {
        allow read, create, update, delete: if isCommunityOwner(communityId);
      }
    }
    
    match /users/{userId} {
      allow read, update, create: if isUser(userId);
    }

    match /invitations/{inviteId} {
        allow read: if isUser(getInvite(inviteId).data.createdBy);
        allow create: if isUser(communityData().createdBy);
        // Allow update if:
        // 1. The user accepting the invite is changing status from pending
        // 2. The community owner is managing invites
        allow update: if (isUser(request.auth.uid) && isPendingInvite(inviteId)) || isCommunityOwner(getInvite(inviteId).data.communityId);
    }
  }
}
