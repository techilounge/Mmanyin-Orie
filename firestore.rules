rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helpers ----------
    function isAuth()       { return request.auth != null; }
    function isSelf(uid)    { return isAuth() && request.auth.uid == uid; }

    function communityRef(communityId) {
      return get(/databases/$(database)/documents/communities/$(communityId));
    }

    function isOwner(communityId) {
      let c = communityRef(communityId);
      return isAuth() && c.exists() && c.data.ownerUid == request.auth.uid;
    }

    function memberRef(communityId, uid) {
      return get(/databases/$(database)/documents/communities/$(communityId)/members/$(uid));
    }

    function isMember(communityId) {
      return isAuth() &&
             exists(/databases/$(database)/documents/communities/$(communityId)/members/$(request.auth.uid));
    }

    function isAdmin(communityId) {
      return isMember(communityId) &&
             memberRef(communityId, request.auth.uid).data.role in ['owner','admin'];
    }

    function inviteRef(inviteId) {
      return get(/databases/$(database)/documents/invitations/$(inviteId));
    }

    function hasValidInvite(inviteId, communityId, code) {
      let inv = inviteRef(inviteId);
      return inv.exists() &&
             inv.data.communityId == communityId &&
             inv.data.code == code &&
             (!('email' in inv.data) || inv.data.email == request.auth.token.email);
    }

    // ---------- Users ----------
    match /users/{userId} {
      allow read, create, update, delete: if isSelf(userId);
    }

    // ---------- Invitations ----------
    match /invitations/{inviteId} {
      allow read: if inviteRef(inviteId).exists() && (
                    (inviteRef(inviteId).data.createdBy != null &&
                     inviteRef(inviteId).data.createdBy == request.auth.uid) ||
                    (inviteRef(inviteId).data.email != null &&
                     inviteRef(inviteId).data.email == request.auth.token.email) ||
                    isAdmin(inviteRef(inviteId).data.communityId)
                  );
      allow create: if isAuth() && isAdmin(request.resource.data.communityId);
      allow update: if isAuth() &&
                    inviteRef(inviteId).exists() &&
                    request.resource.data.acceptedByUid == request.auth.uid &&
                    request.resource.data.code == inviteRef(inviteId).data.code;
    }

    // ---------- Communities ----------
    match /communities/{communityId} {

      // owner or member can read
      allow read: if isAuth() && (isMember(communityId) || isOwner(communityId));

      // FIX: accept either ownerUid or createdBy from the client
      allow create: if isAuth() && (
        (('ownerUid' in request.resource.data) && request.resource.data.ownerUid == request.auth.uid) ||
        (('createdBy' in request.resource.data) && request.resource.data.createdBy == request.auth.uid)
      );

      allow update: if isAuth() && ( isOwner(communityId) || isAdmin(communityId) );

      // ----- Members -----
      match /members/{memberId} {
        allow read: if isAuth() && (isMember(communityId) || isOwner(communityId));

        // Create:
        //  a) Owner bootstraps THEIR OWN membership as 'owner' (must be separate request after community create)
        //  b) Admins can create any membership with valid role
        //  c) Self-join via valid invite as 'user'
        allow create: if
          ( isOwner(communityId) && isSelf(memberId) && request.resource.data.role == 'owner' )
          ||
          ( isAdmin(communityId) && request.resource.data.role in ['owner','admin','user'] )
          ||
          ( isSelf(memberId) &&
            hasValidInvite(request.resource.data.inviteId, communityId, request.resource.data.inviteCode) &&
            request.resource.data.role == 'user' );

        // Update: admins can change role; user can edit own doc if role unchanged
        allow update: if
          ( isAdmin(communityId) && request.resource.data.role in ['owner','admin','user'] )
          ||
          ( isSelf(memberId) && request.resource.data.role == resource.data.role );

        allow delete: if isAdmin(communityId) || isOwner(communityId);
      }

      // ----- Families -----
      match /families/{familyId} {
        allow read: if isAuth() && (isMember(communityId) || isOwner(communityId));
        allow create, update, delete: if isAuth() && (isAdmin(communityId) || isOwner(communityId));
      }

      // ----- Contributions -----
      match /contributions/{contributionId} {
        allow read: if isAuth() && (isMember(communityId) || isOwner(communityId));
        allow create, update, delete: if isAuth() && (isAdmin(communityId) || isOwner(communityId));
      }
    }

    // (Optional) Subscriptions owned by the user
    match /subscriptions/{subId} {
      allow read: if isAuth() && resource.data.uid == request.auth.uid;
      allow create: if isAuth() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if false;
    }
  }
}
