
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function communityData() {
      return request.resource.data;
    }
    
    function isMemberOf(communityId) {
      return isSignedIn() && exists(/databases/$(database)/documents/communities/$(communityId)/members/$(request.auth.uid));
    }
    
    function getRole(communityId) {
      return get(/databases/$(database)/documents/communities/$(communityId)/members/$(request.auth.uid)).data.role;
    }

    function isOwner(communityId) {
      return getRole(communityId) == 'owner';
    }
    
    function isAdmin(communityId) {
      let role = getRole(communityId);
      return role == 'admin' || role == 'owner';
    }

    // ===== Rules =====

    // Users can only read/write their own user document
    match /users/{userId} {
      allow read, update: if isUser(userId);
      allow create: if isSignedIn();
    }

    // Communities can be created by any signed-in user.
    // The client-side code will prevent duplicates.
    // They can be read by the owner OR a member.
    // They can only be updated by an admin/owner of that community.
    match /communities/{communityId} {
      allow create: if isSignedIn() && isUser(communityData().ownerUid);
      allow read: if isUser(resource.data.ownerUid) || isMemberOf(communityId);
      allow update: if isAdmin(communityId);
      // Disallow deletion for safety
      allow delete: if false;

      // Members can be managed by admins.
      // Members can read their own member document.
      match /members/{memberId} {
        allow read: if isUser(memberId) || isAdmin(communityId);
        allow create, update: if isAdmin(communityId);
        allow delete: if isAdmin(communityId);
      }
      
      // Families can be managed by admins.
      match /families/{familyId} {
        allow read: if isMemberOf(communityId);
        allow create, update, delete: if isAdmin(communityId);
      }

      // Contributions can be read by members and managed by admins.
      match /contributions/{contributionId} {
         allow read: if isMemberOf(communityId);
         allow create, update, delete: if isAdmin(communityId);
      }
    }
    
    // Invitations can be read by the user who created them or the user they are intended for (once uid is known).
    // They can only be created by an authenticated user.
    match /invitations/{inviteId} {
        allow read: if isUser(resource.data.createdBy) || isUser(resource.data.acceptedByUid);
        allow create: if isSignedIn();
        // The member document update logic handles 'accepting' an invite.
        // This rule allows the client to mark the invite as 'accepted'.
        allow update: if request.resource.data.status == 'accepted' && isUser(request.resource.data.acceptedByUid);
        allow delete: if false;
    }
  }
}
