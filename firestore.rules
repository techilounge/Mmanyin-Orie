rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    match /communities/{communityId} {
      allow read: if request.auth != null;
    }

    // Admins and owners can manage all community sub-collections
    match /communities/{communityId}/{collection}/{docId} {
       allow read, write, delete: if request.auth != null && get(/databases/$(database)/documents/communities/$(communityId)/members/$(request.auth.uid)).data.role in ['owner', 'admin'];
    }

    // --- Invitations: allow reading a pending invite, or the invite that matches the signed-in email.
    match /invitations/{inviteId} {
      allow read: if resource.data.status == 'pending'
                  || (request.auth != null
                      && request.auth.token.email == resource.data.email);
      // Accepting the invite: must be the same signed-in email.
      allow update: if request.auth != null
                    && request.auth.token.email == resource.data.email;
      allow create: if request.auth != null;
      allow delete: if false;
    }

    // --- Member creation: the invited user may create/update their own member doc.
    // This rule is critical for the invite acceptance flow to succeed.
    match /communities/{communityId}/members/{uid} {
      // Allow a user to create/update their own membership record
      allow create, update: if request.auth != null && request.auth.uid == uid;
      
      // Admins/Owners can also update any member record
      allow update: if request.auth != null && get(/databases/$(database)/documents/communities/$(communityId)/members/$(request.auth.uid)).data.role in ['owner', 'admin'];

      // Allow members of the same community to read the members list
      allow read: if request.auth != null && exists(/databases/$(database)/documents/communities/$(communityId)/members/$(request.auth.uid));

      // Only admins/owners can delete
      allow delete: if request.auth != null && get(/databases/$(database)/documents/communities/$(communityId)/members/$(request.auth.uid)).data.role in ['owner', 'admin'];
    }

    // Allow authenticated users to create documents in the /mail collection
    // This is required for the "Trigger Email" extension to work.
    match /mail/{docId} {
      allow read: if false; // No one should read the mail queue
      allow write: if request.auth != null;
    }
  }
}